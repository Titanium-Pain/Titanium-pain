{"version":3,"sources":["resources/app.asar/node_modules/browser-pack/_prelude.js","Script/AnimOp2.js","project.js","Script/AnimOp.js","Script/AnimStory.js","Script/Bullet.js","Script/ChooseDiffculty.js","Script/ChooseMap.js","Script/EnemyScript.js","Script/Finish.js","Script/GameOver.js","Script/Global.js","Script/LabelAnimation.js","Script/MainLoop.js","Script/MusicScript.js","Script/Player.js","Script/StartGame.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","AnimOp2","module","cc","_RFpush","Class","extends","Component","properties","onLoad","anim","this","getComponent","Animation","play","onOp2Finished","director","loadScene","_RFpop","AnimOp","onOpFinish","AnimStory","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","node","onStoryFinished","Bullet","speed","direction","shootingrange","parent","playShootSound","outOfTheWall","x","y","update","dt","destroy","ChooseDiffculty","reference","default","type","Node","f1","window","Global","diffculty","f2","f3","f4","chooseEasy","chooseNormal","chooseHard","chooseInsane","ChooseMap","chooseMap1","EnemyScript","DetectRadius","petrolcooldown","count","detected","onCollisionEnter","other","game","enemyCount","score","group","onDestroy","getPlayerDistance","playerposx","player","playerposy","dist","pDistance","position","p","moveTowardPlayer","playerx","playery","rand","Math","floor","random","Finish","GameOver","scoreDisplay","Label","playsound","url","AudioClip","audioEngine","playMusic","setScoreLabel","c","diff","string","toString","LabelAnimation","MainLoop","spawnNumber","wave","clearwave","enemyPrefab","Prefab","bgm","waveDisplay","manager","getCollisionManager","enabled","randomPosition","randx","randy","maxx","width","maxy","height","randomMinus1To1","spawnAnEnemy","newEnemy","instantiate","addChild","setPosition","spawnEnemy","MusicScript","Player","atkcooldown","atkcount","bulletPrefab","attacksound","setInputControl","playEffect","setEffectsVolume","w","moveup","movedown","moveleft","d","moveright","up","atkup","atkdown","atkleft","atkright","down","left","right","escape","onKeyReleased","checkAtkCooldown","attack","newbullet","script","setRotation","StartGame"],"mappings":"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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '43e31YqUUZMEZoHCsFf3oME', 'AnimOp2');\n// Script\\AnimOp2.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('2');\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onOp2Finished: function onOp2Finished() {\n        cc.director.loadScene('Story');\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"AnimOp2\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '43e31YqUUZMEZoHCsFf3oME', 'AnimOp2');\n// Script\\AnimOp2.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('2');\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onOp2Finished: function onOp2Finished() {\n        cc.director.loadScene('Story');\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();\n},{}],\"AnimOp\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '4e3baV0NxpJN499jOJaFuhI', 'AnimOp');\n// Script\\AnimOp.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('1');\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onOpFinish: function onOpFinish() {\n        cc.director.loadScene('op2');\n    }\n});\n\ncc._RFpop();\n},{}],\"AnimStory\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '27b06SMm0ZMGoPtP+dIYwdU', 'AnimStory');\n// Script\\AnimStory.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('5');\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.s:\n                        cc.director.loadScene('Title');\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onStoryFinished: function onStoryFinished() {\n        cc.director.loadScene('Title');\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();\n},{}],\"Bullet\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'c9c22MJeHlFsIchbvM7DuGK', 'Bullet');\n// Script\\Bullet.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        speed: 10,\n        direction: 0,\n        shootingrange: 250\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.parent.getComponent(\"Player\").playShootSound();\n    },\n\n    outOfTheWall: function outOfTheWall() {\n        if (this.node.x > this.shootingrange || this.node.x < -this.shootingrange || this.node.y > this.shootingrange || this.node.y < -this.shootingrange) {\n            return true;\n        }\n        return false;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        /*switch(this.direction){\r\n            case 0:\r\n                this.node.y+=this.speed;\r\n                break;\r\n            case 1:\r\n                this.node.x+=this.speed;\r\n                break;\r\n            case 2:\r\n                this.node.y-=this.speed;\r\n                break;\r\n            case 3:\r\n                this.node.x-=this.speed;\r\n                break;\r\n        }*/\n        this.node.y += this.speed;\n        if (this.outOfTheWall()) {\n            this.node.destroy();\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"ChooseDiffculty\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '63ae010Q4hBIpypEQfuWM+P', 'ChooseDiffculty');\n// Script\\ChooseDiffculty.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        reference: {\n            \"default\": null,\n            type: cc.Node\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.f1:\n                        //this.chooseEasy();\n                        //console.log(\"entered\");\n                        window.Global.diffculty = 0;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                    case cc.KEY.f2:\n                        //this.chooseNormal();\n                        window.Global.diffculty = 1;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                    case cc.KEY.f3:\n                        //this.chooseHard();\n                        window.Global.diffculty = 2;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                    case cc.KEY.f4:\n                        //this.chooseInsane();\n                        window.Global.diffculty = 3;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n\n    chooseEasy: function chooseEasy() {\n        window.Global.diffculty = 0;\n        cc.director.loadScene(\"Mainloop\");\n    },\n\n    chooseNormal: function chooseNormal() {\n        window.Global.diffculty = 1;\n        cc.director.loadScene(\"Mainloop\");\n    },\n\n    chooseHard: function chooseHard() {\n        window.Global.diffculty = 2;\n        cc.director.loadScene(\"Mainloop\");\n    },\n\n    chooseInsane: function chooseInsane() {\n        window.Global.diffculty = 3;\n        cc.director.loadScene(\"Mainloop\");\n    }\n});\n\ncc._RFpop();\n},{}],\"ChooseMap\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '185395JNV9EW5e8sW0Y7O/0', 'ChooseMap');\n// Script\\ChooseMap.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.f1:\n                        //this.chooseEasy();\n                        //console.log(\"entered\");\n                        cc.director.loadScene('ChooseDiffculty');\n                        break;\n                    /*case cc.KEY.f2:\r\n                        //this.chooseNormal();\r\n                        window.Global.diffculty=1;\r\n                        cc.director.loadScene(\"Mainloop\");\r\n                        break;\r\n                    case cc.KEY.f3:\r\n                        //this.chooseHard();\r\n                        window.Global.diffculty=2;\r\n                        cc.director.loadScene(\"Mainloop\");\r\n                        break;\r\n                    case cc.KEY.f4:\r\n                        //this.chooseInsane();\r\n                        window.Global.diffculty=3;\r\n                        cc.director.loadScene(\"Mainloop\");\r\n                        break;*/\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n    // },\n\n    chooseMap1: function chooseMap1() {\n        cc.director.loadScene('ChooseDiffculty');\n    }\n});\n\ncc._RFpop();\n},{}],\"EnemyScript\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '668ca4H4g5KpJvlrDwNy45M', 'EnemyScript');\n// Script\\EnemyScript.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        DetectRadius: 1200,\n        petrolcooldown: 1,\n        speed: 0,\n        count: 0,\n        detected: false\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.count = 0;\n        this.detected = false;\n    },\n\n    outOfTheWall: function outOfTheWall() {\n        if (this.node.x > 480 || this.node.x < -480 || this.node.y > 320 || this.node.y < -320) {\n            return true;\n        }\n        return false;\n    },\n\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        //this.node.parent.getComponent(\"MainLoop\").enemyCount--;\n        this.game.enemyCount--;\n        window.Global.score++;\n        self.node.destroy();\n        if (other.node.group == \"Player\") {\n            cc.director.loadScene(\"GameOver\");\n        } else {\n            other.node.destroy();\n        }\n    },\n\n    onDestroy: function onDestroy() {},\n\n    getPlayerDistance: function getPlayerDistance() {\n        var playerposx = this.game.player.x;\n        //console.log(\"playerposx\"+playerposx);\n        var playerposy = this.game.player.y;\n        var dist = cc.pDistance(this.node.position, cc.p(playerposx, playerposy));\n        return dist;\n    },\n\n    moveTowardPlayer: function moveTowardPlayer() {\n        var playerx = this.game.player.x;\n        var playery = this.game.player.y;\n        if (playerx >= this.node.x) {\n            if (this.node.x + this.speed >= playerx) {\n                this.node.x = playerx;\n            } else {\n                this.node.x += this.speed;\n            }\n        } else {\n            if (this.node.x - this.speed < playerx) {\n                this.node.x = playerx;\n            } else {\n                this.node.x -= this.speed;\n            }\n        }\n        if (playery >= this.node.y) {\n            if (this.node.y + this.speed >= playery) {\n                this.node.y = playery;\n            } else {\n                this.node.y += this.speed;\n            }\n        } else {\n            if (this.node.y - this.speed < playery) {\n                this.node.y = playery;\n            } else {\n                this.node.y -= this.speed;\n            }\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //console.log(this.detected);\n        /*var rand=Math.floor(Math.random()*(3+1));\r\n        switch(rand){\r\n            case 0:\r\n                this.node.x+=this.speed;\r\n                break;\r\n            case 1:\r\n                this.node.x-=this.speed;\r\n                break;\r\n            case 2:\r\n                this.node.y+=this.speed;\r\n                break;\r\n            case 3:\r\n                this.node.y-=this.speed;\r\n                break;\r\n        }*/\n        if (this.detected === true) {\n            this.moveTowardPlayer();\n        } else if (this.getPlayerDistance() < this.DetectRadius) {\n            this.speed *= 0.5;\n            this.moveTowardPlayer();\n            this.detected = true;\n        } else {\n            this.count++;\n            if (this.count >= this.petrolcooldown) {\n                var rand = Math.floor(Math.random() * (24 + 1));\n                switch (rand) {\n                    case 1:\n                        this.node.x += this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed;\n                        }\n                        break;\n                    case 2:\n                        this.node.x -= this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed;\n                        }\n                        break;\n                    case 3:\n                        this.node.y += this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.y -= this.speed;\n                        }\n                        break;\n                    case 4:\n                        this.node.y -= this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.y += this.speed;\n                        }\n                        break;\n                    case 5:\n                        this.node.x -= this.speed * 0.8;\n                        this.node.y += this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.8;\n                            this.node.y -= this.speed * 0.6;\n                        }\n                        break;\n                    case 6:\n                        this.node.x -= this.speed * 0.6;\n                        this.node.y += this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.6;\n                            this.node.y -= this.speed * 0.8;\n                        }\n                        break;\n                    case 7:\n                        this.node.x += this.speed * 0.6;\n                        this.node.y += this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.6;\n                            this.node.y -= this.speed * 0.8;\n                        }\n                        break;\n                    case 8:\n                        this.node.x -= this.speed * 0.6;\n                        this.node.y -= this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.6;\n                            this.node.y += this.speed * 0.8;\n                        }\n                        break;\n                    case 9:\n                        this.node.x -= this.speed * 0.8;\n                        this.node.y -= this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.8;\n                            this.node.y += this.speed * 0.6;\n                        }\n                        break;\n                    case 10:\n                        this.node.x += this.speed * 0.8;\n                        this.node.y += this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.8;\n                            this.node.y -= this.speed * 0.6;\n                        }\n                        break;\n                    case 11:\n                        this.node.x += this.speed * 0.8;\n                        this.node.y -= this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.8;\n                            this.node.y += this.speed * 0.6;\n                        }\n                        break;\n                    case 12:\n                        this.node.x += this.speed * 0.6;\n                        this.node.y -= this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.6;\n                            this.node.y += this.speed * 0.8;\n                        }\n                        break;\n                }\n                this.count = 0;\n            }\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"Finish\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'bda5fz1uapHlYOVKn+euGqr', 'Finish');\n// Script\\Finish.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"GameOver\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'd0569adHfJExZ8lXXGpzM4R', 'GameOver');\n// Script\\GameOver.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        playsound: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        cc.audioEngine.playMusic(this.playsound);\n        var self = this;\n        this.setScoreLabel();\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.r:\n                        cc.director.loadScene('Mainloop');\n                        break;\n                    case cc.KEY.c:\n                        cc.director.loadScene(\"ChooseDiffculty\");\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    setScoreLabel: function setScoreLabel() {\n        var diff = '';\n        switch (window.Global.diffculty) {\n            case 0:\n                diff = 'Easy';\n                break;\n            case 1:\n                diff = 'Normal';\n                break;\n            case 2:\n                diff = 'Hard';\n                break;\n            case 3:\n                diff = 'Lunatic';\n                break;\n        }\n\n        this.scoreDisplay.string = \"You Killed \" + '\\n' + window.Global.score.toString() + '\\n' + \"Zombies\" + '\\n' + 'Under' + '\\n' + diff + '\\n' + 'Diffculty';\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();\n},{}],\"Global\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '8e5a0P2rJJBLrwrW4wVzLlE', 'Global');\n// Script\\Global.js\n\nwindow.Global = {\n    diffculty: 0,\n    score: 0\n};\n\ncc._RFpop();\n},{}],\"LabelAnimation\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '4d753Wha7lJFY7hl0Pp2d1l', 'LabelAnimation');\n// Script\\LabelAnimation.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('6');\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onOp2Finished: function onOp2Finished() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('6');\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();\n},{}],\"MainLoop\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'c20f4tSvydGS5qRzvn5G9z9', 'MainLoop');\n// Script\\MainLoop.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        enemyCount: 0,\n        spawnNumber: 0,\n        wave: 0,\n        clearwave: 5,\n        enemyPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n        bgm: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        waveDisplay: {\n            'default': null,\n            type: cc.Label\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        this.enemyCount = 0;\n        this.wave = 0;\n        window.Global.score = 0;\n        //console.log(enemyCount);\n        var diffculty = window.Global.diffculty;\n        //console.log(cc.game.isPersistRootNode(this.passarg));\n        //console.log(\"diffculty\"+diffculty)\n        switch (diffculty) {\n            case 0:\n                this.spawnNumber = 5;\n                break;\n            case 1:\n                this.spawnNumber = 15;\n                break;\n            case 2:\n                this.spawnNumber = 35;\n                break;\n            case 3:\n                this.spawnNumber = 50;\n                break;\n        }\n        cc.audioEngine.playMusic(this.bgm);\n        //console.log(\"onLoad \"+this.spawnNumber);\n    },\n\n    randomPosition: function randomPosition() {\n        var playerx = 0;\n        var playery = 0;\n        playerx = this.player.x;\n        playery = this.player.y;\n        var randx = 0;\n        var randy = 0;\n        var maxx = this.node.width / 2;\n        var maxy = this.node.height / 2;\n        randx = cc.randomMinus1To1() * maxx;\n        randy = cc.randomMinus1To1() * maxy;\n        while ((randx - playerx) * (randx - playerx) + (randy - playery) * (randy - playery) < 45000) {\n            randx = cc.randomMinus1To1() * maxx;\n            randy = cc.randomMinus1To1() * maxy;\n        }\n        return cc.p(randx, randy);\n    },\n\n    spawnAnEnemy: function spawnAnEnemy() {\n        var newEnemy = cc.instantiate(this.enemyPrefab);\n        this.node.addChild(newEnemy);\n        newEnemy.setPosition(this.randomPosition());\n        newEnemy.getComponent('EnemyScript').game = this;\n        this.enemyCount++;\n        //log(\"spawn an enemy \"+this.enemyCount);\n    },\n\n    spawnEnemy: function spawnEnemy() {\n        //console.log(this.spawnNumber);\n        for (var i = 0; i < this.spawnNumber; i++) {\n            this.spawnAnEnemy();\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //console.log(this.enemyCount);\n        if (this.enemyCount <= 0) {\n            this.wave++;\n            if (this.wave > this.clearwave) {\n                cc.director.loadScene(\"Finish\");\n            }\n            this.spawnNumber += 5;\n            this.spawnEnemy();\n            this.waveDisplay.string = 'Wave:' + this.wave.toString();\n        }\n    }\n});\n\ncc._RFpop();\n},{}],\"MusicScript\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '0fd33A665BNhpcv6Ce/8D+Q', 'MusicScript');\n// Script\\MusicScript.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        bgm: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        cc.audioEngine.playMusic(this.bgm, true);\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"Player\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'eb35476F6BEvpTzVCY3Tw39', 'Player');\n// Script\\Player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        speed: 0,\n        atkcooldown: 10,\n        atkcount: 0,\n        shootingrange: 200,\n\n        /*moveup:false,\r\n        movedown:false,\r\n        moveleft:false,\r\n        moveright:false,*/\n        bulletPrefab: {\n            \"default\": null,\n            type: cc.Prefab\n        },\n        attacksound: {\n            \"default\": null,\n            url: cc.AudioClip\n        },\n        bgm: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var moveup = false;\n        var movedown = false;\n        var moveleft = false;\n        var moveright = false;\n        var atkup = false;\n        var atkdown = false;\n        var atkleft = false;\n        var atkright = false;\n        var attatkdir = 0;\n        this.atkcount = 0;\n        this.setInputControl();\n    },\n\n    playShootSound: function playShootSound() {\n        cc.audioEngine.playEffect(this.attacksound, false);\n        cc.audioEngine.setEffectsVolume(0.3);\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.w:\n                        //self.moveleft =false;\n                        //self.moveright= false;\n                        self.moveup = true;\n                        //self.movedown = false;\n                        break;\n                    case cc.KEY.s:\n                        //self.moveleft =false;\n                        //self.moveright= false;\n                        //self.moveup = false;\n                        self.movedown = true;\n                        break;\n                    case cc.KEY.a:\n                        self.moveleft = true;\n                        //self.moveright= false;\n                        //self.moveup = false;\n                        //self.movedown = false;\n                        break;\n                    case cc.KEY.d:\n                        //self.moveleft =false;\n                        self.moveright = true;\n                        //self.moveup = false;\n                        //self.movedown = false;\n                        break;\n                    case cc.KEY.up:\n                        self.atkup = true;\n                        self.atkdown = false;\n                        self.atkleft = false;\n                        self.atkright = false;\n                        break;\n                    case cc.KEY.down:\n                        self.atkup = false;\n                        self.atkdown = true;\n                        self.atkleft = false;\n                        self.atkright = false;\n                        break;\n                    case cc.KEY.left:\n                        self.atkup = false;\n                        self.atkdown = false;\n                        self.atkleft = true;\n                        self.atkright = false;\n                        break;\n                    case cc.KEY.right:\n                        self.atkup = false;\n                        self.atkdown = false;\n                        self.atkleft = false;\n                        self.atkright = true;\n                        break;\n                    case cc.KEY.escape:\n                        cc.audioEngine.playMusic(this.bgm, true);\n                        cc.director.loadScene('Title');\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.w:\n                        self.moveup = false;\n                        break;\n                    case cc.KEY.s:\n                        self.movedown = false;\n                        break;\n                    case cc.KEY.a:\n                        self.moveleft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.moveright = false;\n                        break;\n                    case cc.KEY.up:\n                        self.atkup = false;\n                        break;\n                    case cc.KEY.down:\n                        self.atkdown = false;\n                        break;\n                    case cc.KEY.left:\n                        self.atkleft = false;\n                        break;\n                    case cc.KEY.right:\n                        self.atkright = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    outOfTheWall: function outOfTheWall() {\n        if (this.node.x > 480 || this.node.x < -480 || this.node.y > 320 || this.node.y < -320) {\n            return true;\n        }\n        return false;\n    },\n\n    checkAtkCooldown: function checkAtkCooldown() {\n        if (this.atkcount >= this.atkcooldown) {\n            return true;\n        }\n        return false;\n    },\n\n    attack: function attack(a) {\n        if (this.checkAtkCooldown()) {\n            var newbullet = cc.instantiate(this.bulletPrefab);\n            this.node.addChild(newbullet);\n            newbullet.setPosition(0, 0);\n            var script = newbullet.getComponent(\"Bullet\");\n            script.direction = a;\n            script.shootingrange = this.shootingrange;\n            this.node.setRotation(90 * a);\n            this.atkcount = 0;\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.atkcount++;\n        if (this.moveleft) {\n            this.node.x -= this.speed;\n            if (this.outOfTheWall()) {\n                this.node.x += this.speed;\n            }\n        }\n        if (this.moveright) {\n            this.node.x += this.speed;\n            if (this.outOfTheWall()) {\n                this.node.x -= this.speed;\n            }\n        }\n        if (this.movedown) {\n            this.node.y -= this.speed;\n            if (this.outOfTheWall()) {\n                this.node.y += this.speed;\n            }\n        }\n        if (this.moveup) {\n            this.node.y += this.speed;\n            if (this.outOfTheWall()) {\n                this.node.y -= this.speed;\n            }\n        }\n        if (this.atkup) {\n            this.attack(0);\n        }\n        if (this.atkdown) {\n            this.attack(2);\n        }\n        if (this.atkleft) {\n            this.attack(3);\n        }\n        if (this.atkright) {\n            this.attack(1);\n        }\n    }\n\n});\n/*onDestroy:function(){\r\n    cc.director.loadScene('GameOver');\r\n},*/\n\ncc._RFpop();\n},{}],\"StartGame\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '36629pAxdpBI4tOsHKceOZu', 'StartGame');\n// Script\\StartGame.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.s:\n                        cc.director.loadScene('ChooseMap');\n                        break;\n                    case cc.KEY.l:\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    StartGame: function StartGame() {}\n    //cc.director.loadScene('Mainloop');\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();\n},{}]},{},[\"ChooseMap\",\"MusicScript\",\"AnimStory\",\"StartGame\",\"AnimOp2\",\"AnimOp\",\"LabelAnimation\",\"ChooseDiffculty\",\"EnemyScript\",\"Global\",\"Finish\",\"MainLoop\",\"Bullet\",\"GameOver\",\"Player\"])\n\n","\"use strict\";\ncc._RFpush(module, '4e3baV0NxpJN499jOJaFuhI', 'AnimOp');\n// Script\\AnimOp.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('1');\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onOpFinish: function onOpFinish() {\n        cc.director.loadScene('op2');\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '27b06SMm0ZMGoPtP+dIYwdU', 'AnimStory');\n// Script\\AnimStory.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('5');\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.s:\n                        cc.director.loadScene('Title');\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onStoryFinished: function onStoryFinished() {\n        cc.director.loadScene('Title');\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'c9c22MJeHlFsIchbvM7DuGK', 'Bullet');\n// Script\\Bullet.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        speed: 10,\n        direction: 0,\n        shootingrange: 250\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.parent.getComponent(\"Player\").playShootSound();\n    },\n\n    outOfTheWall: function outOfTheWall() {\n        if (this.node.x > this.shootingrange || this.node.x < -this.shootingrange || this.node.y > this.shootingrange || this.node.y < -this.shootingrange) {\n            return true;\n        }\n        return false;\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        /*switch(this.direction){\r\n            case 0:\r\n                this.node.y+=this.speed;\r\n                break;\r\n            case 1:\r\n                this.node.x+=this.speed;\r\n                break;\r\n            case 2:\r\n                this.node.y-=this.speed;\r\n                break;\r\n            case 3:\r\n                this.node.x-=this.speed;\r\n                break;\r\n        }*/\n        this.node.y += this.speed;\n        if (this.outOfTheWall()) {\n            this.node.destroy();\n        }\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '63ae010Q4hBIpypEQfuWM+P', 'ChooseDiffculty');\n// Script\\ChooseDiffculty.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        reference: {\n            \"default\": null,\n            type: cc.Node\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.f1:\n                        //this.chooseEasy();\n                        //console.log(\"entered\");\n                        window.Global.diffculty = 0;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                    case cc.KEY.f2:\n                        //this.chooseNormal();\n                        window.Global.diffculty = 1;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                    case cc.KEY.f3:\n                        //this.chooseHard();\n                        window.Global.diffculty = 2;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                    case cc.KEY.f4:\n                        //this.chooseInsane();\n                        window.Global.diffculty = 3;\n                        cc.director.loadScene(\"Mainloop\");\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n\n    chooseEasy: function chooseEasy() {\n        window.Global.diffculty = 0;\n        cc.director.loadScene(\"Mainloop\");\n    },\n\n    chooseNormal: function chooseNormal() {\n        window.Global.diffculty = 1;\n        cc.director.loadScene(\"Mainloop\");\n    },\n\n    chooseHard: function chooseHard() {\n        window.Global.diffculty = 2;\n        cc.director.loadScene(\"Mainloop\");\n    },\n\n    chooseInsane: function chooseInsane() {\n        window.Global.diffculty = 3;\n        cc.director.loadScene(\"Mainloop\");\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '185395JNV9EW5e8sW0Y7O/0', 'ChooseMap');\n// Script\\ChooseMap.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.f1:\n                        //this.chooseEasy();\n                        //console.log(\"entered\");\n                        cc.director.loadScene('ChooseDiffculty');\n                        break;\n                    /*case cc.KEY.f2:\r\n                        //this.chooseNormal();\r\n                        window.Global.diffculty=1;\r\n                        cc.director.loadScene(\"Mainloop\");\r\n                        break;\r\n                    case cc.KEY.f3:\r\n                        //this.chooseHard();\r\n                        window.Global.diffculty=2;\r\n                        cc.director.loadScene(\"Mainloop\");\r\n                        break;\r\n                    case cc.KEY.f4:\r\n                        //this.chooseInsane();\r\n                        window.Global.diffculty=3;\r\n                        cc.director.loadScene(\"Mainloop\");\r\n                        break;*/\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n    // },\n\n    chooseMap1: function chooseMap1() {\n        cc.director.loadScene('ChooseDiffculty');\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '668ca4H4g5KpJvlrDwNy45M', 'EnemyScript');\n// Script\\EnemyScript.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        DetectRadius: 1200,\n        petrolcooldown: 1,\n        speed: 0,\n        count: 0,\n        detected: false\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.count = 0;\n        this.detected = false;\n    },\n\n    outOfTheWall: function outOfTheWall() {\n        if (this.node.x > 480 || this.node.x < -480 || this.node.y > 320 || this.node.y < -320) {\n            return true;\n        }\n        return false;\n    },\n\n    onCollisionEnter: function onCollisionEnter(other, self) {\n        //this.node.parent.getComponent(\"MainLoop\").enemyCount--;\n        this.game.enemyCount--;\n        window.Global.score++;\n        self.node.destroy();\n        if (other.node.group == \"Player\") {\n            cc.director.loadScene(\"GameOver\");\n        } else {\n            other.node.destroy();\n        }\n    },\n\n    onDestroy: function onDestroy() {},\n\n    getPlayerDistance: function getPlayerDistance() {\n        var playerposx = this.game.player.x;\n        //console.log(\"playerposx\"+playerposx);\n        var playerposy = this.game.player.y;\n        var dist = cc.pDistance(this.node.position, cc.p(playerposx, playerposy));\n        return dist;\n    },\n\n    moveTowardPlayer: function moveTowardPlayer() {\n        var playerx = this.game.player.x;\n        var playery = this.game.player.y;\n        if (playerx >= this.node.x) {\n            if (this.node.x + this.speed >= playerx) {\n                this.node.x = playerx;\n            } else {\n                this.node.x += this.speed;\n            }\n        } else {\n            if (this.node.x - this.speed < playerx) {\n                this.node.x = playerx;\n            } else {\n                this.node.x -= this.speed;\n            }\n        }\n        if (playery >= this.node.y) {\n            if (this.node.y + this.speed >= playery) {\n                this.node.y = playery;\n            } else {\n                this.node.y += this.speed;\n            }\n        } else {\n            if (this.node.y - this.speed < playery) {\n                this.node.y = playery;\n            } else {\n                this.node.y -= this.speed;\n            }\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //console.log(this.detected);\n        /*var rand=Math.floor(Math.random()*(3+1));\r\n        switch(rand){\r\n            case 0:\r\n                this.node.x+=this.speed;\r\n                break;\r\n            case 1:\r\n                this.node.x-=this.speed;\r\n                break;\r\n            case 2:\r\n                this.node.y+=this.speed;\r\n                break;\r\n            case 3:\r\n                this.node.y-=this.speed;\r\n                break;\r\n        }*/\n        if (this.detected === true) {\n            this.moveTowardPlayer();\n        } else if (this.getPlayerDistance() < this.DetectRadius) {\n            this.speed *= 0.5;\n            this.moveTowardPlayer();\n            this.detected = true;\n        } else {\n            this.count++;\n            if (this.count >= this.petrolcooldown) {\n                var rand = Math.floor(Math.random() * (24 + 1));\n                switch (rand) {\n                    case 1:\n                        this.node.x += this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed;\n                        }\n                        break;\n                    case 2:\n                        this.node.x -= this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed;\n                        }\n                        break;\n                    case 3:\n                        this.node.y += this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.y -= this.speed;\n                        }\n                        break;\n                    case 4:\n                        this.node.y -= this.speed;\n                        if (this.outOfTheWall()) {\n                            this.node.y += this.speed;\n                        }\n                        break;\n                    case 5:\n                        this.node.x -= this.speed * 0.8;\n                        this.node.y += this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.8;\n                            this.node.y -= this.speed * 0.6;\n                        }\n                        break;\n                    case 6:\n                        this.node.x -= this.speed * 0.6;\n                        this.node.y += this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.6;\n                            this.node.y -= this.speed * 0.8;\n                        }\n                        break;\n                    case 7:\n                        this.node.x += this.speed * 0.6;\n                        this.node.y += this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.6;\n                            this.node.y -= this.speed * 0.8;\n                        }\n                        break;\n                    case 8:\n                        this.node.x -= this.speed * 0.6;\n                        this.node.y -= this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.6;\n                            this.node.y += this.speed * 0.8;\n                        }\n                        break;\n                    case 9:\n                        this.node.x -= this.speed * 0.8;\n                        this.node.y -= this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x += this.speed * 0.8;\n                            this.node.y += this.speed * 0.6;\n                        }\n                        break;\n                    case 10:\n                        this.node.x += this.speed * 0.8;\n                        this.node.y += this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.8;\n                            this.node.y -= this.speed * 0.6;\n                        }\n                        break;\n                    case 11:\n                        this.node.x += this.speed * 0.8;\n                        this.node.y -= this.speed * 0.6;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.8;\n                            this.node.y += this.speed * 0.6;\n                        }\n                        break;\n                    case 12:\n                        this.node.x += this.speed * 0.6;\n                        this.node.y -= this.speed * 0.8;\n                        if (this.outOfTheWall()) {\n                            this.node.x -= this.speed * 0.6;\n                            this.node.y += this.speed * 0.8;\n                        }\n                        break;\n                }\n                this.count = 0;\n            }\n        }\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'bda5fz1uapHlYOVKn+euGqr', 'Finish');\n// Script\\Finish.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'd0569adHfJExZ8lXXGpzM4R', 'GameOver');\n// Script\\GameOver.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        scoreDisplay: {\n            'default': null,\n            type: cc.Label\n        },\n        playsound: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        cc.audioEngine.playMusic(this.playsound);\n        var self = this;\n        this.setScoreLabel();\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.r:\n                        cc.director.loadScene('Mainloop');\n                        break;\n                    case cc.KEY.c:\n                        cc.director.loadScene(\"ChooseDiffculty\");\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    setScoreLabel: function setScoreLabel() {\n        var diff = '';\n        switch (window.Global.diffculty) {\n            case 0:\n                diff = 'Easy';\n                break;\n            case 1:\n                diff = 'Normal';\n                break;\n            case 2:\n                diff = 'Hard';\n                break;\n            case 3:\n                diff = 'Lunatic';\n                break;\n        }\n\n        this.scoreDisplay.string = \"You Killed \" + '\\n' + window.Global.score.toString() + '\\n' + \"Zombies\" + '\\n' + 'Under' + '\\n' + diff + '\\n' + 'Diffculty';\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '8e5a0P2rJJBLrwrW4wVzLlE', 'Global');\n// Script\\Global.js\n\nwindow.Global = {\n    diffculty: 0,\n    score: 0\n};\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '4d753Wha7lJFY7hl0Pp2d1l', 'LabelAnimation');\n// Script\\LabelAnimation.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('6');\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    onOp2Finished: function onOp2Finished() {\n        var anim = this.getComponent(cc.Animation);\n        anim.play('6');\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'c20f4tSvydGS5qRzvn5G9z9', 'MainLoop');\n// Script\\MainLoop.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        enemyCount: 0,\n        spawnNumber: 0,\n        wave: 0,\n        clearwave: 5,\n        enemyPrefab: {\n            'default': null,\n            type: cc.Prefab\n        },\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n        bgm: {\n            'default': null,\n            url: cc.AudioClip\n        },\n        waveDisplay: {\n            'default': null,\n            type: cc.Label\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        this.enemyCount = 0;\n        this.wave = 0;\n        window.Global.score = 0;\n        //console.log(enemyCount);\n        var diffculty = window.Global.diffculty;\n        //console.log(cc.game.isPersistRootNode(this.passarg));\n        //console.log(\"diffculty\"+diffculty)\n        switch (diffculty) {\n            case 0:\n                this.spawnNumber = 5;\n                break;\n            case 1:\n                this.spawnNumber = 15;\n                break;\n            case 2:\n                this.spawnNumber = 35;\n                break;\n            case 3:\n                this.spawnNumber = 50;\n                break;\n        }\n        cc.audioEngine.playMusic(this.bgm);\n        //console.log(\"onLoad \"+this.spawnNumber);\n    },\n\n    randomPosition: function randomPosition() {\n        var playerx = 0;\n        var playery = 0;\n        playerx = this.player.x;\n        playery = this.player.y;\n        var randx = 0;\n        var randy = 0;\n        var maxx = this.node.width / 2;\n        var maxy = this.node.height / 2;\n        randx = cc.randomMinus1To1() * maxx;\n        randy = cc.randomMinus1To1() * maxy;\n        while ((randx - playerx) * (randx - playerx) + (randy - playery) * (randy - playery) < 45000) {\n            randx = cc.randomMinus1To1() * maxx;\n            randy = cc.randomMinus1To1() * maxy;\n        }\n        return cc.p(randx, randy);\n    },\n\n    spawnAnEnemy: function spawnAnEnemy() {\n        var newEnemy = cc.instantiate(this.enemyPrefab);\n        this.node.addChild(newEnemy);\n        newEnemy.setPosition(this.randomPosition());\n        newEnemy.getComponent('EnemyScript').game = this;\n        this.enemyCount++;\n        //log(\"spawn an enemy \"+this.enemyCount);\n    },\n\n    spawnEnemy: function spawnEnemy() {\n        //console.log(this.spawnNumber);\n        for (var i = 0; i < this.spawnNumber; i++) {\n            this.spawnAnEnemy();\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //console.log(this.enemyCount);\n        if (this.enemyCount <= 0) {\n            this.wave++;\n            if (this.wave > this.clearwave) {\n                cc.director.loadScene(\"Finish\");\n            }\n            this.spawnNumber += 5;\n            this.spawnEnemy();\n            this.waveDisplay.string = 'Wave:' + this.wave.toString();\n        }\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '0fd33A665BNhpcv6Ce/8D+Q', 'MusicScript');\n// Script\\MusicScript.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        bgm: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        cc.audioEngine.playMusic(this.bgm, true);\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'eb35476F6BEvpTzVCY3Tw39', 'Player');\n// Script\\Player.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        speed: 0,\n        atkcooldown: 10,\n        atkcount: 0,\n        shootingrange: 200,\n\n        /*moveup:false,\r\n        movedown:false,\r\n        moveleft:false,\r\n        moveright:false,*/\n        bulletPrefab: {\n            \"default\": null,\n            type: cc.Prefab\n        },\n        attacksound: {\n            \"default\": null,\n            url: cc.AudioClip\n        },\n        bgm: {\n            \"default\": null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var moveup = false;\n        var movedown = false;\n        var moveleft = false;\n        var moveright = false;\n        var atkup = false;\n        var atkdown = false;\n        var atkleft = false;\n        var atkright = false;\n        var attatkdir = 0;\n        this.atkcount = 0;\n        this.setInputControl();\n    },\n\n    playShootSound: function playShootSound() {\n        cc.audioEngine.playEffect(this.attacksound, false);\n        cc.audioEngine.setEffectsVolume(0.3);\n    },\n\n    setInputControl: function setInputControl() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.w:\n                        //self.moveleft =false;\n                        //self.moveright= false;\n                        self.moveup = true;\n                        //self.movedown = false;\n                        break;\n                    case cc.KEY.s:\n                        //self.moveleft =false;\n                        //self.moveright= false;\n                        //self.moveup = false;\n                        self.movedown = true;\n                        break;\n                    case cc.KEY.a:\n                        self.moveleft = true;\n                        //self.moveright= false;\n                        //self.moveup = false;\n                        //self.movedown = false;\n                        break;\n                    case cc.KEY.d:\n                        //self.moveleft =false;\n                        self.moveright = true;\n                        //self.moveup = false;\n                        //self.movedown = false;\n                        break;\n                    case cc.KEY.up:\n                        self.atkup = true;\n                        self.atkdown = false;\n                        self.atkleft = false;\n                        self.atkright = false;\n                        break;\n                    case cc.KEY.down:\n                        self.atkup = false;\n                        self.atkdown = true;\n                        self.atkleft = false;\n                        self.atkright = false;\n                        break;\n                    case cc.KEY.left:\n                        self.atkup = false;\n                        self.atkdown = false;\n                        self.atkleft = true;\n                        self.atkright = false;\n                        break;\n                    case cc.KEY.right:\n                        self.atkup = false;\n                        self.atkdown = false;\n                        self.atkleft = false;\n                        self.atkright = true;\n                        break;\n                    case cc.KEY.escape:\n                        cc.audioEngine.playMusic(this.bgm, true);\n                        cc.director.loadScene('Title');\n                        break;\n                }\n            },\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.w:\n                        self.moveup = false;\n                        break;\n                    case cc.KEY.s:\n                        self.movedown = false;\n                        break;\n                    case cc.KEY.a:\n                        self.moveleft = false;\n                        break;\n                    case cc.KEY.d:\n                        self.moveright = false;\n                        break;\n                    case cc.KEY.up:\n                        self.atkup = false;\n                        break;\n                    case cc.KEY.down:\n                        self.atkdown = false;\n                        break;\n                    case cc.KEY.left:\n                        self.atkleft = false;\n                        break;\n                    case cc.KEY.right:\n                        self.atkright = false;\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    outOfTheWall: function outOfTheWall() {\n        if (this.node.x > 480 || this.node.x < -480 || this.node.y > 320 || this.node.y < -320) {\n            return true;\n        }\n        return false;\n    },\n\n    checkAtkCooldown: function checkAtkCooldown() {\n        if (this.atkcount >= this.atkcooldown) {\n            return true;\n        }\n        return false;\n    },\n\n    attack: function attack(a) {\n        if (this.checkAtkCooldown()) {\n            var newbullet = cc.instantiate(this.bulletPrefab);\n            this.node.addChild(newbullet);\n            newbullet.setPosition(0, 0);\n            var script = newbullet.getComponent(\"Bullet\");\n            script.direction = a;\n            script.shootingrange = this.shootingrange;\n            this.node.setRotation(90 * a);\n            this.atkcount = 0;\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        this.atkcount++;\n        if (this.moveleft) {\n            this.node.x -= this.speed;\n            if (this.outOfTheWall()) {\n                this.node.x += this.speed;\n            }\n        }\n        if (this.moveright) {\n            this.node.x += this.speed;\n            if (this.outOfTheWall()) {\n                this.node.x -= this.speed;\n            }\n        }\n        if (this.movedown) {\n            this.node.y -= this.speed;\n            if (this.outOfTheWall()) {\n                this.node.y += this.speed;\n            }\n        }\n        if (this.moveup) {\n            this.node.y += this.speed;\n            if (this.outOfTheWall()) {\n                this.node.y -= this.speed;\n            }\n        }\n        if (this.atkup) {\n            this.attack(0);\n        }\n        if (this.atkdown) {\n            this.attack(2);\n        }\n        if (this.atkleft) {\n            this.attack(3);\n        }\n        if (this.atkright) {\n            this.attack(1);\n        }\n    }\n\n});\n/*onDestroy:function(){\r\n    cc.director.loadScene('GameOver');\r\n},*/\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '36629pAxdpBI4tOsHKceOZu', 'StartGame');\n// Script\\StartGame.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        var self = this;\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.s:\n                        cc.director.loadScene('ChooseMap');\n                        break;\n                    case cc.KEY.l:\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    StartGame: function StartGame() {}\n    //cc.director.loadScene('Mainloop');\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n\ncc._RFpop();"],"sourceRoot":"/source/"}